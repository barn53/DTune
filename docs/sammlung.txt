============================================
Namen:
Δ Tune, Δ Tunr
Δ SVG
Δ Plannr, Δ Planner
Δ PathTuner
Δ DimTunr
Δ Dim'n'Go, Δ Dim'n'Shop, Δ Dim2Shop, Δ Dim4Shop, Δ Dim'n'Route
Δ Annotate, Δ Annotex
Δ Measure



============================================
Hah, klick auf Pfad öffnet nicht den dialog, sondern markiert den Pfad
Modal Editor öffnen über Kontext Menü
Dann Save gilt für alle selektierten Pfade!


Zustände des Pfads:
- einfach nur Pfad - irgendwas einheitliches mit dezentem outline
- geschlossener Pfad leichte transparente Füllung
- Hover - orange glow
- Ausgewählt - blauer glow



============================================
svg linien einheitlich keine faben vom original übernehmen anzeigen.
auch die linien dicke sollte einheitlich sein.



============================================
shaper attribute path outlines, je nach cutType.
also online, inline, outline pocket als zusätzlichen outline hinter dem eigentlichen
Pfad einbauen, so sieht man gleich, welchen cut Type der Pfad hat.
Erweiterung innen/außen oder beidseitig, Tasche über füllung...



============================================
attribut-modal schöner machen:
mini svg vom element im attribute editor statt sperriger zu technischer überschrift
Wie kontext menü oder sogar tool tips.
icons verwenden für tie attribute.
Großschrift
Auswahl werte für die input Felder als buttons im Textfeld



============================================
cut type setzt auch die linien farbe und -füllung entsprechend shaper vorgaben. (evtl. nur für den export)
https://support.shapertools.com/hs-fs/hubfs/Knowledge%20Base%20Import/Cut_Style_Guide-2.png?width=1300&height=600&name=Cut_Style_Guide-2.png



wenn kein geschlossener pfad, dann kann nur 'online' cutType ausgewählt werden.
    In SVG wird ein Pfad als „geschlossen“ betrachtet, wenn er mit einem Z oder z endet (ClosePath-Befehl).
    Wenn der d-String mit Z oder z endet, ist er geschlossen.
    Ein Pfad kann theoretisch geometrisch geschlossen sein, auch wenn er kein Z enthält (z. B. Start- und Endpunkt identisch). Das müsste man rechnerisch prüfen, indem man den ersten und letzten Punkt der Kontur vergleicht.
    Mit JavaScript kann man auch die Methoden von SVGPathElement nutzen, etwa getTotalLength() und getPointAtLength(), um Anfangs- und Endkoordinaten zu vergleichen:

                <!DOCTYPE html>
            <html lang="de">
            <head>
              <meta charset="UTF-8">
              <title>Pfad geschlossen?</title>
              <style>
                svg { border: 1px solid #ccc; }
                path { stroke: black; fill: none; }
              </style>
            </head>
            <body>
              <h2>SVG Pfad geschlossen?</h2>
              <svg width="300" height="150">
                <!-- geschlossener Pfad mit Z -->
                <path id="pfad1" d="M10 10 L100 10 L100 100 L10 100 Z" stroke="green"/>
                <!-- offener Pfad (aber Start = Endpunkt) -->
                <path id="pfad2" d="M150 10 L240 10 L240 100 L150 100 L150 10" stroke="blue"/>
                <!-- offener Pfad, nicht geschlossen -->
                <path id="pfad3" d="M10 120 L100 120 L100 140" stroke="red"/>
              </svg>

              <div id="ergebnisse"></div>

              <script>
                function isClosedByZ(path) {
                  const d = path.getAttribute("d");
                  return /z$/i.test(d.trim());
                }

                function isGeometricallyClosed(path) {
                  const len = path.getTotalLength();
                  const start = path.getPointAtLength(0);
                  const end = path.getPointAtLength(len);
                  const epsilon = 0.01; // Toleranz
                  return Math.abs(start.x - end.x) < epsilon &&
                         Math.abs(start.y - end.y) < epsilon;
                }

                function checkPath(id) {
                  const path = document.getElementById(id);
                  return {
                    id,
                    closedByZ: isClosedByZ(path),
                    closedGeometrically: isGeometricallyClosed(path)
                  };
                }

                const result1 = checkPath("pfad1");
                const result2 = checkPath("pfad2");
                const result3 = checkPath("pfad3");

                const results = [result1, result2, result3];
                const container = document.getElementById("ergebnisse");

                results.forEach(r => {
                  const p = document.createElement("p");
                  p.textContent =
                    `${r.id}: per Z=${r.closedByZ}, geometrisch=${r.closedGeometrically}`;
                  container.appendChild(p);
                });
              </script>
            </body>
            </html>


ganzer hintergrund blurred



============================================
Internationalisierung: DE EN FR


============================================
Gitter skalierung ist wieder durcheinander gekommen!
Scheiße - wann ist das passiert?
Mit Änderung: 7840a57315dbf4c3fdff43c64c595e822aad720b FullscreenEditor
styles.css


============================================
Gitter gestrichelt machen


============================================
Gitter über Zoom Buttons!


============================================
Datei laden bei leerem local storage:
Gleich editor anzeigen dann dragdrop feld über dem viewport anzeigen
design wie attribut dialog. Das lila fenster wegmachen.



============================================
Titelbar eingabe texte Size: Zoom: sind nur weiß kontrast einbauen,damit man sieht das ist wasaktives.
Titelbar responsive: zu small: alle eingaben und toggels in hamburger Menü packen



============================================
Keyboard Shortcuts
- Zoom: +/-,
- Pan: Pfeiltasten
- Export, Import
- Ctrl+A: Alle Pfade markieren
- Eigenschaften Dialog öffnen



=============================================
Druckbaren Werkstatt Plan exportieren mit
allen Maßen an den Pfaden
-> Mehrwert!








