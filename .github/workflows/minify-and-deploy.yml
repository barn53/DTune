name: Minify and Deploy to GitHub Pages

on:
  push:
    branches: [ release ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  minify-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
    - name: Checkout release branch
      uses: actions/checkout@v4
      with:
        ref: release
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install minification tools
      run: |
        npm init -y
        npm install --save-dev html-minifier-terser terser clean-css-cli

    - name: Create minified directory structure
      run: |
        mkdir -p minified/js
        mkdir -p minified/icons
        # Only create directories for assets that will be copied
        [ -d "docs" ] && mkdir -p minified/docs
        [ -d "testfiles" ] && mkdir -p minified/testfiles

    - name: Minify CSS files
      run: |
        echo "Minifying CSS files..."
        if [ -f "styles.css" ]; then
          npx cleancss -o minified/styles.css styles.css
          echo "âœ“ styles.css minified"
        fi

        # Minify any additional CSS files
        find . -name "*.css" -not -path "./node_modules/*" -not -path "./minified/*" | while read -r file; do
          if [ "$file" != "./styles.css" ]; then
            output_path="minified/${file#./}"
            mkdir -p "$(dirname "$output_path")"
            npx cleancss -o "$output_path" "$file"
            echo "âœ“ $file minified"
          fi
        done

    - name: Minify JavaScript files
      run: |
        echo "Minifying JavaScript files..."
        if [ -d "js" ]; then
          for file in js/*.js; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              npx terser "$file" -o "minified/js/$filename" \
                --compress sequences=true,dead_code=true,conditionals=true,booleans=true,unused=true,if_return=true,join_vars=true,drop_console=false \
                --mangle \
                --source-map "url='$filename.map'" \
                --output "minified/js/$filename"
              echo "âœ“ $file minified"
            fi
          done
        fi

        # Minify any other JS files in subdirectories
        find . -name "*.js" -not -path "./js/*" -not -path "./node_modules/*" -not -path "./minified/*" | while read -r file; do
          output_path="minified/${file#./}"
          mkdir -p "$(dirname "$output_path")"
          npx terser "$file" -o "$output_path" \
            --compress sequences=true,dead_code=true,conditionals=true,booleans=true,unused=true,if_return=true,join_vars=true,drop_console=false \
            --mangle
          echo "âœ“ $file minified"
        done

    - name: Minify HTML files
      run: |
        echo "Minifying HTML files..."
        find . -name "*.html" -not -path "./node_modules/*" -not -path "./minified/*" | while read -r file; do
          output_path="minified/${file#./}"
          mkdir -p "$(dirname "$output_path")"
          npx html-minifier-terser \
            "$file" \
            --output "$output_path" \
            --collapse-whitespace \
            --remove-comments \
            --remove-optional-tags \
            --remove-redundant-attributes \
            --remove-script-type-attributes \
            --remove-tag-whitespace \
            --use-short-doctype \
            --minify-css true \
            --minify-js true \
            --keep-closing-slash
          echo "âœ“ $file minified"
        done

    - name: Copy static assets
      run: |
        echo "Copying static assets..."

        # Copy icons (required for the app)
        if [ -d "icons" ]; then
          cp -r icons/* minified/icons/
          echo "âœ“ Icons copied"
        fi

        # Copy docs (optional)
        if [ -d "docs" ]; then
          cp -r docs/* minified/docs/
          echo "âœ“ Docs copied"
        fi

        # Copy testfiles (optional - you may want to exclude these for production)
        # Uncomment the next 4 lines if you want test files in production
        # if [ -d "testfiles" ]; then
        #   cp -r testfiles/* minified/testfiles/
        #   echo "âœ“ Test files copied"
        # fi

        # Copy README for documentation
        if [ -f "README.md" ]; then
          cp README.md minified/
          echo "âœ“ README.md copied"
        fi

    - name: Display minification results
      run: |
        echo "=== Minification Results ==="
        echo "Original size:"
        du -sh . 2>/dev/null | grep -v "./minified" | head -1 || echo "Could not calculate original size"
        echo "Minified size:"
        du -sh minified/
        echo "=========================="

        echo "Files in minified directory:"
        find minified/ -type f -exec ls -la {} \;

    - name: Switch to webapp branch
      run: |
        # Configure git
        git config --global user.name 'GitHub Actions Bot'
        git config --global user.email 'actions@github.com'

        # Stash any uncommitted changes from build process
        git stash --include-untracked || true

        # Check if webapp branch exists remotely
        if git ls-remote --exit-code --heads origin webapp >/dev/null 2>&1; then
          echo "webapp branch exists remotely, checking it out"
          git fetch origin webapp
          git checkout -B webapp origin/webapp
        else
          echo "Creating new webapp branch"
          git checkout --orphan webapp
          git rm -rf . || true
        fi

    - name: Deploy minified files
      run: |
        # Remove all existing files (but keep .git)
        find . -maxdepth 1 -not -name '.git' -not -name '.' -not -name '..' -exec rm -rf {} + 2>/dev/null || true

        # Copy minified files to root
        cp -r minified/* . 2>/dev/null || true

        # Remove the minified directory and build artifacts
        rm -rf minified node_modules package*.json

        # Add all files
        git add .

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit - minified files are identical to existing webapp branch"
          echo "skip_pages_deploy=true" >> $GITHUB_ENV
        else
          # Commit changes
          git commit -m "ðŸš€ Deploy minified version from release branch

          Generated on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          Source commit: ${{ github.sha }}
          Workflow run: ${{ github.run_number }}"

          # Push to webapp branch
          git push origin webapp
          echo "âœ… Successfully pushed to webapp branch"
          echo "skip_pages_deploy=false" >> $GITHUB_ENV
        fi

    - name: Setup GitHub Pages
      if: env.skip_pages_deploy != 'true'
      uses: actions/configure-pages@v4

    - name: Upload Pages artifact
      if: env.skip_pages_deploy != 'true'
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'

    - name: Deploy to GitHub Pages
      if: env.skip_pages_deploy != 'true'
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Summary
      run: |
        if [ "${{ env.skip_pages_deploy }}" = "true" ]; then
          echo "## âœ… Workflow completed - No changes detected" >> $GITHUB_STEP_SUMMARY
          echo "The minified files are identical to what's already deployed." >> $GITHUB_STEP_SUMMARY
        else
          echo "## ðŸš€ Deployment successful!" >> $GITHUB_STEP_SUMMARY
          echo "Your minified SVG Shaper Editor has been deployed to GitHub Pages." >> $GITHUB_STEP_SUMMARY
          echo "- **Source branch**: release" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy branch**: webapp" >> $GITHUB_STEP_SUMMARY
          echo "- **Pages URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        fi